Оперативный план:
	имя переменной элемента
	резолв шрифтов (как вариант конструировать шрифт динамически)
	генерация кода

Осталось:
	Компиляция UI
		При изменении файла ui, отправлять в ресурс, если требуется пересобирать сразу

		Control
			определяем аргументы вызова
	v		добавляем класс в модель ChildDescription
		Layout
			определяем аргументы вызова
	v		устанавливаем LayoutDescription
		L
			определяем атрибут
			определяем присваивание
			устанавливаем Layout settings исходя из Layout родителя
		аттрибут
			определяем присваивание
			добавляем установку атрибута
		метод
			определяем аргументы вызова
			добавялем вызов метода
		Редактор
			https://wiki.eclipse.org/FAQ_How_do_I_write_an_editor_for_my_own_language%3F
		
	Шрифты
		проблема: в одном FontEntry может храниться один шрифт
		перечислять индексированные шрифты в xml, генерировать их в R.fonts
		индексированный png
	музыка
	запаковка/добавление в jar
	атлас текстур
	IsoSprite
		подсчет использований
		отзеркаливать заранее
		IsoBigSprite разбивать на куски заранее
		бинарь для каждого спрайта. [id состояния][массив из id drawable]   ИЛИ собирать генератором в класс (считывать классы из xml)  
	
На выходе получаем:
	класс R в папке /gen/src
	gen/resources.csv - общая карта для режима отладки (доступ к исходным файлам)
	gen/res/resources.res - глобальная карта ресурсов
	для каждого атласа:
		gen/res/<номер файла>.png - текстура
	для DATA:
		gen/res/<номер файла> - исходник

Структура бинаря:
	[версия][оффсет для ID-0][число ID = n]
	[указатель для ID-0][ID-1]...[ID-n]
	[данные ID-0][данные ID-1]..[данные ID-n]
	
	данные: [тип][данные типа]
		[PICTURE][номер атласа][anchor][координаты в атласе][размер]
		  [ARRAY][номер атласа][количество = x][ID-0]..[ID-x]
	  [ANIMATION][номер атласа][число фреймов = k][фрейм-0]..[фрейм-k]
		   [FONT][число символов = n][символ 0][символ 1]..[символ n]
					символ: [байты символа][anchor][координаты в атласе][размер]
		   [DATA](ничего)

Запаковка ресурсов
	ловим событие PRE_BUILD или найти способ перехватить сбор jar
	составляем список используемых ресурсов
	сортируем по группам
	группы собираем в атласы ресурсов
	сохраняем все в /gen/res
	запаковываем в jar
	
java.util.zip.ZipFile zip = new java.util.ZipFile(file);

http://help.eclipse.org/neon/index.jsp
https://eclipse.org/articles/Article-Resource-deltas/resource-deltas.html


Начало работы:
	Help - Install New Software
	Установить Eclipse Plugin Development Tools



















